// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `interchainqueries/interchainqueries_tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron_org.interchainadapter.interchainqueries.MsgRegisterInterchainQuery)
pub struct MsgRegisterInterchainQuery {
    // message fields
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.MsgRegisterInterchainQuery.query_data)
    pub query_data: ::std::string::String,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.MsgRegisterInterchainQuery.query_type)
    pub query_type: ::std::string::String,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.MsgRegisterInterchainQuery.zone_id)
    pub zone_id: ::std::string::String,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.MsgRegisterInterchainQuery.connection_id)
    pub connection_id: ::std::string::String,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.MsgRegisterInterchainQuery.update_period)
    pub update_period: u64,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.MsgRegisterInterchainQuery.sender)
    pub sender: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:neutron_org.interchainadapter.interchainqueries.MsgRegisterInterchainQuery.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgRegisterInterchainQuery {
    fn default() -> &'a MsgRegisterInterchainQuery {
        <MsgRegisterInterchainQuery as ::protobuf::Message>::default_instance()
    }
}

impl MsgRegisterInterchainQuery {
    pub fn new() -> MsgRegisterInterchainQuery {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "query_data",
            |m: &MsgRegisterInterchainQuery| { &m.query_data },
            |m: &mut MsgRegisterInterchainQuery| { &mut m.query_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "query_type",
            |m: &MsgRegisterInterchainQuery| { &m.query_type },
            |m: &mut MsgRegisterInterchainQuery| { &mut m.query_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "zone_id",
            |m: &MsgRegisterInterchainQuery| { &m.zone_id },
            |m: &mut MsgRegisterInterchainQuery| { &mut m.zone_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &MsgRegisterInterchainQuery| { &m.connection_id },
            |m: &mut MsgRegisterInterchainQuery| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "update_period",
            |m: &MsgRegisterInterchainQuery| { &m.update_period },
            |m: &mut MsgRegisterInterchainQuery| { &mut m.update_period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender",
            |m: &MsgRegisterInterchainQuery| { &m.sender },
            |m: &mut MsgRegisterInterchainQuery| { &mut m.sender },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgRegisterInterchainQuery>(
            "MsgRegisterInterchainQuery",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgRegisterInterchainQuery {
    const NAME: &'static str = "MsgRegisterInterchainQuery";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.query_data = is.read_string()?;
                },
                18 => {
                    self.query_type = is.read_string()?;
                },
                26 => {
                    self.zone_id = is.read_string()?;
                },
                34 => {
                    self.connection_id = is.read_string()?;
                },
                40 => {
                    self.update_period = is.read_uint64()?;
                },
                50 => {
                    self.sender = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.query_data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.query_data);
        }
        if !self.query_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.query_type);
        }
        if !self.zone_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.zone_id);
        }
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.connection_id);
        }
        if self.update_period != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.update_period);
        }
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.sender);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.query_data.is_empty() {
            os.write_string(1, &self.query_data)?;
        }
        if !self.query_type.is_empty() {
            os.write_string(2, &self.query_type)?;
        }
        if !self.zone_id.is_empty() {
            os.write_string(3, &self.zone_id)?;
        }
        if !self.connection_id.is_empty() {
            os.write_string(4, &self.connection_id)?;
        }
        if self.update_period != 0 {
            os.write_uint64(5, self.update_period)?;
        }
        if !self.sender.is_empty() {
            os.write_string(6, &self.sender)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgRegisterInterchainQuery {
        MsgRegisterInterchainQuery::new()
    }

    fn clear(&mut self) {
        self.query_data.clear();
        self.query_type.clear();
        self.zone_id.clear();
        self.connection_id.clear();
        self.update_period = 0;
        self.sender.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgRegisterInterchainQuery {
        static instance: MsgRegisterInterchainQuery = MsgRegisterInterchainQuery {
            query_data: ::std::string::String::new(),
            query_type: ::std::string::String::new(),
            zone_id: ::std::string::String::new(),
            connection_id: ::std::string::String::new(),
            update_period: 0,
            sender: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgRegisterInterchainQuery {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgRegisterInterchainQuery").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgRegisterInterchainQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRegisterInterchainQuery {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron_org.interchainadapter.interchainqueries.MsgRegisterInterchainQueryResponse)
pub struct MsgRegisterInterchainQueryResponse {
    // message fields
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.MsgRegisterInterchainQueryResponse.id)
    pub id: u64,
    // special fields
    // @@protoc_insertion_point(special_field:neutron_org.interchainadapter.interchainqueries.MsgRegisterInterchainQueryResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgRegisterInterchainQueryResponse {
    fn default() -> &'a MsgRegisterInterchainQueryResponse {
        <MsgRegisterInterchainQueryResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRegisterInterchainQueryResponse {
    pub fn new() -> MsgRegisterInterchainQueryResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &MsgRegisterInterchainQueryResponse| { &m.id },
            |m: &mut MsgRegisterInterchainQueryResponse| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgRegisterInterchainQueryResponse>(
            "MsgRegisterInterchainQueryResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgRegisterInterchainQueryResponse {
    const NAME: &'static str = "MsgRegisterInterchainQueryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgRegisterInterchainQueryResponse {
        MsgRegisterInterchainQueryResponse::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgRegisterInterchainQueryResponse {
        static instance: MsgRegisterInterchainQueryResponse = MsgRegisterInterchainQueryResponse {
            id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgRegisterInterchainQueryResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgRegisterInterchainQueryResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgRegisterInterchainQueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRegisterInterchainQueryResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron_org.interchainadapter.interchainqueries.QueryResult)
pub struct QueryResult {
    // message fields
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.QueryResult.kv_results)
    pub kv_results: ::std::vec::Vec<StorageValue>,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.QueryResult.txs)
    pub txs: ::std::vec::Vec<TxValue>,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.QueryResult.height)
    pub height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:neutron_org.interchainadapter.interchainqueries.QueryResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryResult {
    fn default() -> &'a QueryResult {
        <QueryResult as ::protobuf::Message>::default_instance()
    }
}

impl QueryResult {
    pub fn new() -> QueryResult {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "kv_results",
            |m: &QueryResult| { &m.kv_results },
            |m: &mut QueryResult| { &mut m.kv_results },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "txs",
            |m: &QueryResult| { &m.txs },
            |m: &mut QueryResult| { &mut m.txs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &QueryResult| { &m.height },
            |m: &mut QueryResult| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryResult>(
            "QueryResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryResult {
    const NAME: &'static str = "QueryResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.kv_results.push(is.read_message()?);
                },
                18 => {
                    self.txs.push(is.read_message()?);
                },
                24 => {
                    self.height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.kv_results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.txs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.kv_results {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.txs {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.height != 0 {
            os.write_uint64(3, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryResult {
        QueryResult::new()
    }

    fn clear(&mut self) {
        self.kv_results.clear();
        self.txs.clear();
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryResult {
        static instance: QueryResult = QueryResult {
            kv_results: ::std::vec::Vec::new(),
            txs: ::std::vec::Vec::new(),
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron_org.interchainadapter.interchainqueries.StorageValue)
pub struct StorageValue {
    // message fields
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.StorageValue.storage_prefix)
    pub storage_prefix: ::std::string::String,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.StorageValue.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.StorageValue.value)
    pub value: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.StorageValue.proof)
    pub proof: ::protobuf::MessageField<super::proof::ProofOps>,
    // special fields
    // @@protoc_insertion_point(special_field:neutron_org.interchainadapter.interchainqueries.StorageValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StorageValue {
    fn default() -> &'a StorageValue {
        <StorageValue as ::protobuf::Message>::default_instance()
    }
}

impl StorageValue {
    pub fn new() -> StorageValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "storage_prefix",
            |m: &StorageValue| { &m.storage_prefix },
            |m: &mut StorageValue| { &mut m.storage_prefix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &StorageValue| { &m.key },
            |m: &mut StorageValue| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &StorageValue| { &m.value },
            |m: &mut StorageValue| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::proof::ProofOps>(
            "proof",
            |m: &StorageValue| { &m.proof },
            |m: &mut StorageValue| { &mut m.proof },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StorageValue>(
            "StorageValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StorageValue {
    const NAME: &'static str = "StorageValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.storage_prefix = is.read_string()?;
                },
                18 => {
                    self.key = is.read_bytes()?;
                },
                26 => {
                    self.value = is.read_bytes()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.storage_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.storage_prefix);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.value);
        }
        if let Some(v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.storage_prefix.is_empty() {
            os.write_string(1, &self.storage_prefix)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(2, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(3, &self.value)?;
        }
        if let Some(v) = self.proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StorageValue {
        StorageValue::new()
    }

    fn clear(&mut self) {
        self.storage_prefix.clear();
        self.key.clear();
        self.value.clear();
        self.proof.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StorageValue {
        static instance: StorageValue = StorageValue {
            storage_prefix: ::std::string::String::new(),
            key: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            proof: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StorageValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StorageValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StorageValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron_org.interchainadapter.interchainqueries.TxValue)
pub struct TxValue {
    // message fields
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.TxValue.tx)
    pub tx: ::protobuf::MessageField<super::abcitypes::ResponseDeliverTx>,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.TxValue.delivery_proof)
    pub delivery_proof: ::protobuf::MessageField<MerkleProof>,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.TxValue.inclusion_proof)
    pub inclusion_proof: ::protobuf::MessageField<MerkleProof>,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.TxValue.height)
    pub height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:neutron_org.interchainadapter.interchainqueries.TxValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TxValue {
    fn default() -> &'a TxValue {
        <TxValue as ::protobuf::Message>::default_instance()
    }
}

impl TxValue {
    pub fn new() -> TxValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::abcitypes::ResponseDeliverTx>(
            "tx",
            |m: &TxValue| { &m.tx },
            |m: &mut TxValue| { &mut m.tx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MerkleProof>(
            "delivery_proof",
            |m: &TxValue| { &m.delivery_proof },
            |m: &mut TxValue| { &mut m.delivery_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MerkleProof>(
            "inclusion_proof",
            |m: &TxValue| { &m.inclusion_proof },
            |m: &mut TxValue| { &mut m.inclusion_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &TxValue| { &m.height },
            |m: &mut TxValue| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TxValue>(
            "TxValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TxValue {
    const NAME: &'static str = "TxValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tx)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.delivery_proof)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.inclusion_proof)?;
                },
                32 => {
                    self.height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.delivery_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.inclusion_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tx.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.delivery_proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.inclusion_proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.height != 0 {
            os.write_uint64(4, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TxValue {
        TxValue::new()
    }

    fn clear(&mut self) {
        self.tx.clear();
        self.delivery_proof.clear();
        self.inclusion_proof.clear();
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TxValue {
        static instance: TxValue = TxValue {
            tx: ::protobuf::MessageField::none(),
            delivery_proof: ::protobuf::MessageField::none(),
            inclusion_proof: ::protobuf::MessageField::none(),
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TxValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TxValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TxValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron_org.interchainadapter.interchainqueries.MerkleProof)
pub struct MerkleProof {
    // message fields
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.MerkleProof.total)
    pub total: i64,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.MerkleProof.index)
    pub index: i64,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.MerkleProof.leaf_hash)
    pub leaf_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:neutron_org.interchainadapter.interchainqueries.MerkleProof.aunts)
    pub aunts: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:neutron_org.interchainadapter.interchainqueries.MerkleProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MerkleProof {
    fn default() -> &'a MerkleProof {
        <MerkleProof as ::protobuf::Message>::default_instance()
    }
}

impl MerkleProof {
    pub fn new() -> MerkleProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total",
            |m: &MerkleProof| { &m.total },
            |m: &mut MerkleProof| { &mut m.total },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &MerkleProof| { &m.index },
            |m: &mut MerkleProof| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "leaf_hash",
            |m: &MerkleProof| { &m.leaf_hash },
            |m: &mut MerkleProof| { &mut m.leaf_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "aunts",
            |m: &MerkleProof| { &m.aunts },
            |m: &mut MerkleProof| { &mut m.aunts },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MerkleProof>(
            "MerkleProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MerkleProof {
    const NAME: &'static str = "MerkleProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.total = is.read_int64()?;
                },
                16 => {
                    self.index = is.read_int64()?;
                },
                26 => {
                    self.leaf_hash = is.read_bytes()?;
                },
                34 => {
                    self.aunts.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.total);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.index);
        }
        if !self.leaf_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.leaf_hash);
        }
        for value in &self.aunts {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.total != 0 {
            os.write_int64(1, self.total)?;
        }
        if self.index != 0 {
            os.write_int64(2, self.index)?;
        }
        if !self.leaf_hash.is_empty() {
            os.write_bytes(3, &self.leaf_hash)?;
        }
        for v in &self.aunts {
            os.write_bytes(4, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MerkleProof {
        MerkleProof::new()
    }

    fn clear(&mut self) {
        self.total = 0;
        self.index = 0;
        self.leaf_hash.clear();
        self.aunts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MerkleProof {
        static instance: MerkleProof = MerkleProof {
            total: 0,
            index: 0,
            leaf_hash: ::std::vec::Vec::new(),
            aunts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MerkleProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MerkleProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MerkleProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MerkleProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,interchainqueries/interchainqueries_tx.proto\x12/neutron_org.intercha\
    inadapter.interchainqueries\x1a\x1dtendermint/crypto/proof.proto\x1a\x1f\
    tendermint/abci/abcitypes.proto\"\xd5\x01\n\x1aMsgRegisterInterchainQuer\
    y\x12\x1d\n\nquery_data\x18\x01\x20\x01(\tR\tqueryData\x12\x1d\n\nquery_\
    type\x18\x02\x20\x01(\tR\tqueryType\x12\x17\n\x07zone_id\x18\x03\x20\x01\
    (\tR\x06zoneId\x12#\n\rconnection_id\x18\x04\x20\x01(\tR\x0cconnectionId\
    \x12#\n\rupdate_period\x18\x05\x20\x01(\x04R\x0cupdatePeriod\x12\x16\n\
    \x06sender\x18\x06\x20\x01(\tR\x06sender\"4\n\"MsgRegisterInterchainQuer\
    yResponse\x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\"\xcf\x01\n\x0bQue\
    ryResult\x12\\\n\nkv_results\x18\x01\x20\x03(\x0b2=.neutron_org.intercha\
    inadapter.interchainqueries.StorageValueR\tkvResults\x12J\n\x03txs\x18\
    \x02\x20\x03(\x0b28.neutron_org.interchainadapter.interchainqueries.TxVa\
    lueR\x03txs\x12\x16\n\x06height\x18\x03\x20\x01(\x04R\x06height\"\x90\
    \x01\n\x0cStorageValue\x12%\n\x0estorage_prefix\x18\x01\x20\x01(\tR\rsto\
    ragePrefix\x12\x10\n\x03key\x18\x02\x20\x01(\x0cR\x03key\x12\x14\n\x05va\
    lue\x18\x03\x20\x01(\x0cR\x05value\x121\n\x05proof\x18\x04\x20\x01(\x0b2\
    \x1b.tendermint.crypto.ProofOpsR\x05proof\"\xa1\x02\n\x07TxValue\x122\n\
    \x02tx\x18\x01\x20\x01(\x0b2\".tendermint.abci.ResponseDeliverTxR\x02tx\
    \x12c\n\x0edelivery_proof\x18\x02\x20\x01(\x0b2<.neutron_org.interchaina\
    dapter.interchainqueries.MerkleProofR\rdeliveryProof\x12e\n\x0finclusion\
    _proof\x18\x03\x20\x01(\x0b2<.neutron_org.interchainadapter.interchainqu\
    eries.MerkleProofR\x0einclusionProof\x12\x16\n\x06height\x18\x04\x20\x01\
    (\x04R\x06height\"l\n\x0bMerkleProof\x12\x14\n\x05total\x18\x01\x20\x01(\
    \x03R\x05total\x12\x14\n\x05index\x18\x02\x20\x01(\x03R\x05index\x12\x1b\
    \n\tleaf_hash\x18\x03\x20\x01(\x0cR\x08leafHash\x12\x14\n\x05aunts\x18\
    \x04\x20\x03(\x0cR\x05auntsJ\xc1\r\n\x06\x12\x04\0\0,\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\08\n\t\n\x02\x03\0\x12\
    \x03\x03\0'\n\t\n\x02\x03\x01\x12\x03\x04\0)\n\n\n\x02\x04\0\x12\x04\x07\
    \0\x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\"\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x08\x02\x18\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x08\x02\x07$\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x08\t\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\x16\x17\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\t\x02\x18\n\r\n\x05\x04\0\x02\x01\x04\
    \x12\x04\t\x02\x08\x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\t\x13\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\t\x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\n\x02\x15\n\r\n\
    \x05\x04\0\x02\x02\x04\x12\x04\n\x02\t\x18\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\n\t\x10\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\n\x13\x14\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x03\x0b\x02\x1b\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x0b\x02\n\x15\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\x0b\t\x16\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0b\x19\x1a\
    \n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0c\x02\x1b\n\r\n\x05\x04\0\x02\x04\
    \x04\x12\x04\x0c\x02\x0b\x1b\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x0c\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x0c\t\x16\n\x0c\n\x05\x04\
    \0\x02\x04\x03\x12\x03\x0c\x19\x1a\n\x0b\n\x04\x04\0\x02\x05\x12\x03\r\
    \x02\x14\n\r\n\x05\x04\0\x02\x05\x04\x12\x04\r\x02\x0c\x1b\n\x0c\n\x05\
    \x04\0\x02\x05\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03\r\t\x0f\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\r\x12\x13\n\t\n\x02\
    \x04\x01\x12\x03\x10\0=\n\n\n\x03\x04\x01\x01\x12\x03\x10\x08*\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x10-;\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\
    \x10-,\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x10-3\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\x1046\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x109:\n\n\
    \n\x02\x04\x02\x12\x04\x12\0\x16\x01\n\n\n\x03\x04\x02\x01\x12\x03\x12\
    \x08\x13\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x13\x02'\n\x0c\n\x05\x04\x02\
    \x02\0\x04\x12\x03\x13\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x13\
    \x0b\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x13\x18\"\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x13%&\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x14\x02\
    \x1b\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x14\x02\n\n\x0c\n\x05\x04\
    \x02\x02\x01\x06\x12\x03\x14\x0b\x12\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03\x14\x13\x16\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x14\x19\x1a\n\
    \x0b\n\x04\x04\x02\x02\x02\x12\x03\x15\x02\x14\n\r\n\x05\x04\x02\x02\x02\
    \x04\x12\x04\x15\x02\x14\x1b\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x15\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x15\t\x0f\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03\x15\x12\x13\n\n\n\x02\x04\x03\x12\x04\x18\0\
    \x1e\x01\n\n\n\x03\x04\x03\x01\x12\x03\x18\x08\x14\n\x0b\n\x04\x04\x03\
    \x02\0\x12\x03\x19\x02\x1c\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x19\x02\
    \x18\x16\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\x19\t\x17\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03\x19\x1a\x1b\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1a\x02\x10\n\r\n\
    \x05\x04\x03\x02\x01\x04\x12\x04\x1a\x02\x19\x1c\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03\x1a\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1a\
    \x08\x0b\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1a\x0e\x0f\n\x0b\n\x04\
    \x04\x03\x02\x02\x12\x03\x1b\x02\x12\n\r\n\x05\x04\x03\x02\x02\x04\x12\
    \x04\x1b\x02\x1a\x10\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\x1b\x02\x07\
    \n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x1b\x08\r\n\x0c\n\x05\x04\x03\
    \x02\x02\x03\x12\x03\x1b\x10\x11\n\x0b\n\x04\x04\x03\x02\x03\x12\x03\x1d\
    \x02'\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04\x1d\x02\x1b\x12\n\x0c\n\x05\
    \x04\x03\x02\x03\x06\x12\x03\x1d\x02\x1c\n\x0c\n\x05\x04\x03\x02\x03\x01\
    \x12\x03\x1d\x1d\"\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\x1d%&\n\n\n\
    \x02\x04\x04\x12\x04\x20\0%\x01\n\n\n\x03\x04\x04\x01\x12\x03\x20\x08\
    \x0f\n\x0b\n\x04\x04\x04\x02\0\x12\x03!\x02+\n\r\n\x05\x04\x04\x02\0\x04\
    \x12\x04!\x02\x20\x11\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03!\x02#\n\x0c\
    \n\x05\x04\x04\x02\0\x01\x12\x03!$&\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03!)*\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\"\x02!\n\r\n\x05\x04\x04\x02\
    \x01\x04\x12\x04\"\x02!+\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03\"\x02\r\
    \n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\"\x0e\x1c\n\x0c\n\x05\x04\x04\
    \x02\x01\x03\x12\x03\"\x1f\x20\n\x0b\n\x04\x04\x04\x02\x02\x12\x03#\x02\
    \"\n\r\n\x05\x04\x04\x02\x02\x04\x12\x04#\x02\"!\n\x0c\n\x05\x04\x04\x02\
    \x02\x06\x12\x03#\x02\r\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03#\x0e\x1d\
    \n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03#\x20!\n\x0b\n\x04\x04\x04\x02\
    \x03\x12\x03$\x02\x14\n\r\n\x05\x04\x04\x02\x03\x04\x12\x04$\x02#\"\n\
    \x0c\n\x05\x04\x04\x02\x03\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x04\x02\
    \x03\x01\x12\x03$\t\x0f\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03$\x12\x13\
    \n\n\n\x02\x04\x05\x12\x04'\0,\x01\n\n\n\x03\x04\x05\x01\x12\x03'\x08\
    \x13\n\x0b\n\x04\x04\x05\x02\0\x12\x03(\x02\x12\n\r\n\x05\x04\x05\x02\0\
    \x04\x12\x04(\x02'\x15\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03(\x02\x07\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03(\x08\r\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03(\x10\x11\n\x0b\n\x04\x04\x05\x02\x01\x12\x03)\x02\x12\n\r\n\
    \x05\x04\x05\x02\x01\x04\x12\x04)\x02(\x12\n\x0c\n\x05\x04\x05\x02\x01\
    \x05\x12\x03)\x02\x07\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03)\x08\r\n\
    \x0c\n\x05\x04\x05\x02\x01\x03\x12\x03)\x10\x11\n\x0b\n\x04\x04\x05\x02\
    \x02\x12\x03*\x02\x16\n\r\n\x05\x04\x05\x02\x02\x04\x12\x04*\x02)\x12\n\
    \x0c\n\x05\x04\x05\x02\x02\x05\x12\x03*\x02\x07\n\x0c\n\x05\x04\x05\x02\
    \x02\x01\x12\x03*\x08\x11\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03*\x14\
    \x15\n\x0b\n\x04\x04\x05\x02\x03\x12\x03+\x02\x1b\n\x0c\n\x05\x04\x05\
    \x02\x03\x04\x12\x03+\x02\n\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x03+\x0b\
    \x10\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03+\x11\x16\n\x0c\n\x05\x04\
    \x05\x02\x03\x03\x12\x03+\x19\x1ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::proof::file_descriptor().clone());
            deps.push(super::abcitypes::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(MsgRegisterInterchainQuery::generated_message_descriptor_data());
            messages.push(MsgRegisterInterchainQueryResponse::generated_message_descriptor_data());
            messages.push(QueryResult::generated_message_descriptor_data());
            messages.push(StorageValue::generated_message_descriptor_data());
            messages.push(TxValue::generated_message_descriptor_data());
            messages.push(MerkleProof::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
