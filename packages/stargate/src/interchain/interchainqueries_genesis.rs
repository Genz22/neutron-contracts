// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `interchainqueries/interchainqueries_genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:neutron.interchainadapter.interchainqueries.RegisteredQuery)
pub struct RegisteredQuery {
    // message fields
    // @@protoc_insertion_point(field:neutron.interchainadapter.interchainqueries.RegisteredQuery.id)
    pub id: u64,
    // @@protoc_insertion_point(field:neutron.interchainadapter.interchainqueries.RegisteredQuery.query_data)
    pub query_data: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.interchainadapter.interchainqueries.RegisteredQuery.query_type)
    pub query_type: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.interchainadapter.interchainqueries.RegisteredQuery.zone_id)
    pub zone_id: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.interchainadapter.interchainqueries.RegisteredQuery.connection_id)
    pub connection_id: ::std::string::String,
    // @@protoc_insertion_point(field:neutron.interchainadapter.interchainqueries.RegisteredQuery.update_period)
    pub update_period: u64,
    // @@protoc_insertion_point(field:neutron.interchainadapter.interchainqueries.RegisteredQuery.last_emitted_height)
    pub last_emitted_height: u64,
    // @@protoc_insertion_point(field:neutron.interchainadapter.interchainqueries.RegisteredQuery.last_submitted_result_local_height)
    pub last_submitted_result_local_height: u64,
    // @@protoc_insertion_point(field:neutron.interchainadapter.interchainqueries.RegisteredQuery.last_submitted_result_remote_height)
    pub last_submitted_result_remote_height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:neutron.interchainadapter.interchainqueries.RegisteredQuery.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisteredQuery {
    fn default() -> &'a RegisteredQuery {
        <RegisteredQuery as ::protobuf::Message>::default_instance()
    }
}

impl RegisteredQuery {
    pub fn new() -> RegisteredQuery {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RegisteredQuery| { &m.id },
            |m: &mut RegisteredQuery| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "query_data",
            |m: &RegisteredQuery| { &m.query_data },
            |m: &mut RegisteredQuery| { &mut m.query_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "query_type",
            |m: &RegisteredQuery| { &m.query_type },
            |m: &mut RegisteredQuery| { &mut m.query_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "zone_id",
            |m: &RegisteredQuery| { &m.zone_id },
            |m: &mut RegisteredQuery| { &mut m.zone_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &RegisteredQuery| { &m.connection_id },
            |m: &mut RegisteredQuery| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "update_period",
            |m: &RegisteredQuery| { &m.update_period },
            |m: &mut RegisteredQuery| { &mut m.update_period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_emitted_height",
            |m: &RegisteredQuery| { &m.last_emitted_height },
            |m: &mut RegisteredQuery| { &mut m.last_emitted_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_submitted_result_local_height",
            |m: &RegisteredQuery| { &m.last_submitted_result_local_height },
            |m: &mut RegisteredQuery| { &mut m.last_submitted_result_local_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_submitted_result_remote_height",
            |m: &RegisteredQuery| { &m.last_submitted_result_remote_height },
            |m: &mut RegisteredQuery| { &mut m.last_submitted_result_remote_height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisteredQuery>(
            "RegisteredQuery",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisteredQuery {
    const NAME: &'static str = "RegisteredQuery";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                18 => {
                    self.query_data = is.read_string()?;
                },
                26 => {
                    self.query_type = is.read_string()?;
                },
                34 => {
                    self.zone_id = is.read_string()?;
                },
                42 => {
                    self.connection_id = is.read_string()?;
                },
                48 => {
                    self.update_period = is.read_uint64()?;
                },
                56 => {
                    self.last_emitted_height = is.read_uint64()?;
                },
                64 => {
                    self.last_submitted_result_local_height = is.read_uint64()?;
                },
                72 => {
                    self.last_submitted_result_remote_height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if !self.query_data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.query_data);
        }
        if !self.query_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.query_type);
        }
        if !self.zone_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.zone_id);
        }
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.connection_id);
        }
        if self.update_period != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.update_period);
        }
        if self.last_emitted_height != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.last_emitted_height);
        }
        if self.last_submitted_result_local_height != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.last_submitted_result_local_height);
        }
        if self.last_submitted_result_remote_height != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.last_submitted_result_remote_height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if !self.query_data.is_empty() {
            os.write_string(2, &self.query_data)?;
        }
        if !self.query_type.is_empty() {
            os.write_string(3, &self.query_type)?;
        }
        if !self.zone_id.is_empty() {
            os.write_string(4, &self.zone_id)?;
        }
        if !self.connection_id.is_empty() {
            os.write_string(5, &self.connection_id)?;
        }
        if self.update_period != 0 {
            os.write_uint64(6, self.update_period)?;
        }
        if self.last_emitted_height != 0 {
            os.write_uint64(7, self.last_emitted_height)?;
        }
        if self.last_submitted_result_local_height != 0 {
            os.write_uint64(8, self.last_submitted_result_local_height)?;
        }
        if self.last_submitted_result_remote_height != 0 {
            os.write_uint64(9, self.last_submitted_result_remote_height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisteredQuery {
        RegisteredQuery::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.query_data.clear();
        self.query_type.clear();
        self.zone_id.clear();
        self.connection_id.clear();
        self.update_period = 0;
        self.last_emitted_height = 0;
        self.last_submitted_result_local_height = 0;
        self.last_submitted_result_remote_height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisteredQuery {
        static instance: RegisteredQuery = RegisteredQuery {
            id: 0,
            query_data: ::std::string::String::new(),
            query_type: ::std::string::String::new(),
            zone_id: ::std::string::String::new(),
            connection_id: ::std::string::String::new(),
            update_period: 0,
            last_emitted_height: 0,
            last_submitted_result_local_height: 0,
            last_submitted_result_remote_height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisteredQuery {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisteredQuery").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisteredQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisteredQuery {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1interchainqueries/interchainqueries_genesis.proto\x12+neutron.interch\
    ainadapter.interchainqueries\"\x8c\x03\n\x0fRegisteredQuery\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\x04R\x02id\x12\x1d\n\nquery_data\x18\x02\x20\x01\
    (\tR\tqueryData\x12\x1d\n\nquery_type\x18\x03\x20\x01(\tR\tqueryType\x12\
    \x17\n\x07zone_id\x18\x04\x20\x01(\tR\x06zoneId\x12#\n\rconnection_id\
    \x18\x05\x20\x01(\tR\x0cconnectionId\x12#\n\rupdate_period\x18\x06\x20\
    \x01(\x04R\x0cupdatePeriod\x12.\n\x13last_emitted_height\x18\x07\x20\x01\
    (\x04R\x11lastEmittedHeight\x12J\n\"last_submitted_result_local_height\
    \x18\x08\x20\x01(\x04R\x1elastSubmittedResultLocalHeight\x12L\n#last_sub\
    mitted_result_remote_height\x18\t\x20\x01(\x04R\x1flastSubmittedResultRe\
    moteHeightJ\xaa\x05\n\x06\x12\x04\0\0\x0e\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\x08\n\x01\x02\x12\x03\x01\04\n\n\n\x02\x04\0\x12\x04\x03\0\x0e\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x03\x08\x17\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x04\x02\x10\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x04\x02\x03\x19\n\x0c\
    \n\x05\x04\0\x02\0\x05\x12\x03\x04\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x04\t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x04\x0e\x0f\n\x0b\
    \n\x04\x04\0\x02\x01\x12\x03\x05\x02\x18\n\r\n\x05\x04\0\x02\x01\x04\x12\
    \x04\x05\x02\x04\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x05\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x05\t\x13\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x05\x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x06\x02\x18\n\
    \r\n\x05\x04\0\x02\x02\x04\x12\x04\x06\x02\x05\x18\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x06\t\
    \x13\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x06\x16\x17\n\x0b\n\x04\x04\0\
    \x02\x03\x12\x03\x07\x02\x15\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x07\x02\
    \x06\x18\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x07\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03\x07\t\x10\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03\x07\x13\x14\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x08\x02\x1b\n\r\n\x05\
    \x04\0\x02\x04\x04\x12\x04\x08\x02\x07\x15\n\x0c\n\x05\x04\0\x02\x04\x05\
    \x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x08\t\x16\n\
    \x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x08\x19\x1a\n\x0b\n\x04\x04\0\x02\
    \x05\x12\x03\t\x02\x1b\n\r\n\x05\x04\0\x02\x05\x04\x12\x04\t\x02\x08\x1b\
    \n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\t\t\x16\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\t\x19\x1a\
    \n\x0b\n\x04\x04\0\x02\x06\x12\x03\n\x02!\n\r\n\x05\x04\0\x02\x06\x04\
    \x12\x04\n\x02\t\x1b\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\n\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x06\x01\x12\x03\n\t\x1c\n\x0c\n\x05\x04\0\x02\x06\
    \x03\x12\x03\n\x1f\x20\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x0c\x020\n\r\n\
    \x05\x04\0\x02\x07\x04\x12\x04\x0c\x02\n!\n\x0c\n\x05\x04\0\x02\x07\x05\
    \x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0c\t+\n\x0c\
    \n\x05\x04\0\x02\x07\x03\x12\x03\x0c./\n\x0b\n\x04\x04\0\x02\x08\x12\x03\
    \r\x021\n\r\n\x05\x04\0\x02\x08\x04\x12\x04\r\x02\x0c0\n\x0c\n\x05\x04\0\
    \x02\x08\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\r\t\
    ,\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\r/0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RegisteredQuery::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
