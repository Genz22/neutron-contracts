// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `interchainaccounts/interchainaccounts_query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.interchain_accounts.v1.QueryInterchainAccountAddressRequest)
pub struct QueryInterchainAccountAddressRequest {
    // message fields
    ///  Owner address is the owner of the interchain account on the controller chain
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.QueryInterchainAccountAddressRequest.owner_address)
    pub owner_address: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.QueryInterchainAccountAddressRequest.connection_id)
    pub connection_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.interchain_accounts.v1.QueryInterchainAccountAddressRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryInterchainAccountAddressRequest {
    fn default() -> &'a QueryInterchainAccountAddressRequest {
        <QueryInterchainAccountAddressRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryInterchainAccountAddressRequest {
    pub fn new() -> QueryInterchainAccountAddressRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner_address",
            |m: &QueryInterchainAccountAddressRequest| { &m.owner_address },
            |m: &mut QueryInterchainAccountAddressRequest| { &mut m.owner_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &QueryInterchainAccountAddressRequest| { &m.connection_id },
            |m: &mut QueryInterchainAccountAddressRequest| { &mut m.connection_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryInterchainAccountAddressRequest>(
            "QueryInterchainAccountAddressRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryInterchainAccountAddressRequest {
    const NAME: &'static str = "QueryInterchainAccountAddressRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_address = is.read_string()?;
                },
                18 => {
                    self.connection_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.owner_address);
        }
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.connection_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner_address.is_empty() {
            os.write_string(1, &self.owner_address)?;
        }
        if !self.connection_id.is_empty() {
            os.write_string(2, &self.connection_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryInterchainAccountAddressRequest {
        QueryInterchainAccountAddressRequest::new()
    }

    fn clear(&mut self) {
        self.owner_address.clear();
        self.connection_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryInterchainAccountAddressRequest {
        static instance: QueryInterchainAccountAddressRequest = QueryInterchainAccountAddressRequest {
            owner_address: ::std::string::String::new(),
            connection_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryInterchainAccountAddressRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryInterchainAccountAddressRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryInterchainAccountAddressRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInterchainAccountAddressRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Query response for an interchain account address
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.interchain_accounts.v1.QueryInterchainAccountAddressResponse)
pub struct QueryInterchainAccountAddressResponse {
    // message fields
    ///  The corresponding interchain account address on the host chain
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.QueryInterchainAccountAddressResponse.interchain_account_address)
    pub interchain_account_address: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.interchain_accounts.v1.QueryInterchainAccountAddressResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryInterchainAccountAddressResponse {
    fn default() -> &'a QueryInterchainAccountAddressResponse {
        <QueryInterchainAccountAddressResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryInterchainAccountAddressResponse {
    pub fn new() -> QueryInterchainAccountAddressResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "interchain_account_address",
            |m: &QueryInterchainAccountAddressResponse| { &m.interchain_account_address },
            |m: &mut QueryInterchainAccountAddressResponse| { &mut m.interchain_account_address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryInterchainAccountAddressResponse>(
            "QueryInterchainAccountAddressResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryInterchainAccountAddressResponse {
    const NAME: &'static str = "QueryInterchainAccountAddressResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.interchain_account_address = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.interchain_account_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.interchain_account_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.interchain_account_address.is_empty() {
            os.write_string(1, &self.interchain_account_address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryInterchainAccountAddressResponse {
        QueryInterchainAccountAddressResponse::new()
    }

    fn clear(&mut self) {
        self.interchain_account_address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryInterchainAccountAddressResponse {
        static instance: QueryInterchainAccountAddressResponse = QueryInterchainAccountAddressResponse {
            interchain_account_address: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryInterchainAccountAddressResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryInterchainAccountAddressResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryInterchainAccountAddressResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInterchainAccountAddressResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1interchainaccounts/interchainaccounts_query.proto\x12'ibc.application\
    s.interchain_accounts.v1\"p\n$QueryInterchainAccountAddressRequest\x12#\
    \n\rowner_address\x18\x01\x20\x01(\tR\x0cownerAddress\x12#\n\rconnection\
    _id\x18\x02\x20\x01(\tR\x0cconnectionId\"e\n%QueryInterchainAccountAddre\
    ssResponse\x12<\n\x1ainterchain_account_address\x18\x01\x20\x01(\tR\x18i\
    nterchainAccountAddressJ\xe4\x03\n\x06\x12\x04\0\0\x10\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\00\n\n\n\x02\x04\0\x12\
    \x04\x04\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08,\n[\n\x04\x04\0\x02\
    \0\x12\x03\x08\x02\x1b\x1aN\x20Owner\x20address\x20is\x20the\x20owner\
    \x20of\x20the\x20interchain\x20account\x20on\x20the\x20controller\x20cha\
    in\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x08\x02\x04.\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\t\
    \x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\x19\x1a\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\t\x02\x1b\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\t\x02\x08\
    \x1b\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\t\t\x16\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\x19\
    \x1a\n>\n\x02\x04\x01\x12\x04\r\0\x10\x01\x1a2\x20Query\x20response\x20f\
    or\x20an\x20interchain\x20account\x20address\n\n\n\n\x03\x04\x01\x01\x12\
    \x03\r\x08-\nM\n\x04\x04\x01\x02\0\x12\x03\x0f\x02(\x1a@\x20The\x20corre\
    sponding\x20interchain\x20account\x20address\x20on\x20the\x20host\x20cha\
    in\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0f\x02\r/\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0f\
    \t#\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0f&'b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(QueryInterchainAccountAddressRequest::generated_message_descriptor_data());
            messages.push(QueryInterchainAccountAddressResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
