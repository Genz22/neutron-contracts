// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/staking/v1beta1/staking_tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgDelegate defines a SDK message for performing a delegation of coins
///  from a delegator to a validator.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgDelegate)
pub struct MsgDelegate {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
    pub delegator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgDelegate.validator_address)
    pub validator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgDelegate.amount)
    pub amount: ::protobuf::MessageField<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgDelegate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgDelegate {
    fn default() -> &'a MsgDelegate {
        <MsgDelegate as ::protobuf::Message>::default_instance()
    }
}

impl MsgDelegate {
    pub fn new() -> MsgDelegate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_address",
            |m: &MsgDelegate| { &m.delegator_address },
            |m: &mut MsgDelegate| { &mut m.delegator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &MsgDelegate| { &m.validator_address },
            |m: &mut MsgDelegate| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "amount",
            |m: &MsgDelegate| { &m.amount },
            |m: &mut MsgDelegate| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgDelegate>(
            "MsgDelegate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgDelegate {
    const NAME: &'static str = "MsgDelegate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_address = is.read_string()?;
                },
                18 => {
                    self.validator_address = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.amount)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        if let Some(v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        if let Some(v) = self.amount.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgDelegate {
        MsgDelegate::new()
    }

    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_address.clear();
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgDelegate {
        static instance: MsgDelegate = MsgDelegate {
            delegator_address: ::std::string::String::new(),
            validator_address: ::std::string::String::new(),
            amount: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgDelegate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgDelegate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgDelegate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDelegate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgDelegateResponse defines the Msg/Delegate response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgDelegateResponse)
pub struct MsgDelegateResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgDelegateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgDelegateResponse {
    fn default() -> &'a MsgDelegateResponse {
        <MsgDelegateResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgDelegateResponse {
    pub fn new() -> MsgDelegateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgDelegateResponse>(
            "MsgDelegateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgDelegateResponse {
    const NAME: &'static str = "MsgDelegateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgDelegateResponse {
        MsgDelegateResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgDelegateResponse {
        static instance: MsgDelegateResponse = MsgDelegateResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgDelegateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgDelegateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgDelegateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDelegateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgBeginRedelegate defines a SDK message for performing a redelegation
///  of coins from a delegator and source validator to a destination validator.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgBeginRedelegate)
pub struct MsgBeginRedelegate {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
    pub delegator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
    pub validator_src_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
    pub validator_dst_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
    pub amount: ::protobuf::MessageField<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgBeginRedelegate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgBeginRedelegate {
    fn default() -> &'a MsgBeginRedelegate {
        <MsgBeginRedelegate as ::protobuf::Message>::default_instance()
    }
}

impl MsgBeginRedelegate {
    pub fn new() -> MsgBeginRedelegate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_address",
            |m: &MsgBeginRedelegate| { &m.delegator_address },
            |m: &mut MsgBeginRedelegate| { &mut m.delegator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_src_address",
            |m: &MsgBeginRedelegate| { &m.validator_src_address },
            |m: &mut MsgBeginRedelegate| { &mut m.validator_src_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_dst_address",
            |m: &MsgBeginRedelegate| { &m.validator_dst_address },
            |m: &mut MsgBeginRedelegate| { &mut m.validator_dst_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "amount",
            |m: &MsgBeginRedelegate| { &m.amount },
            |m: &mut MsgBeginRedelegate| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgBeginRedelegate>(
            "MsgBeginRedelegate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgBeginRedelegate {
    const NAME: &'static str = "MsgBeginRedelegate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_address = is.read_string()?;
                },
                18 => {
                    self.validator_src_address = is.read_string()?;
                },
                26 => {
                    self.validator_dst_address = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.amount)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_src_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_src_address);
        }
        if !self.validator_dst_address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.validator_dst_address);
        }
        if let Some(v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_src_address.is_empty() {
            os.write_string(2, &self.validator_src_address)?;
        }
        if !self.validator_dst_address.is_empty() {
            os.write_string(3, &self.validator_dst_address)?;
        }
        if let Some(v) = self.amount.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgBeginRedelegate {
        MsgBeginRedelegate::new()
    }

    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_src_address.clear();
        self.validator_dst_address.clear();
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgBeginRedelegate {
        static instance: MsgBeginRedelegate = MsgBeginRedelegate {
            delegator_address: ::std::string::String::new(),
            validator_src_address: ::std::string::String::new(),
            validator_dst_address: ::std::string::String::new(),
            amount: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgBeginRedelegate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgBeginRedelegate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgBeginRedelegate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgBeginRedelegate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgBeginRedelegateResponse defines the Msg/BeginRedelegate response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgBeginRedelegateResponse)
pub struct MsgBeginRedelegateResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgBeginRedelegateResponse.completion_time)
    pub completion_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgBeginRedelegateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgBeginRedelegateResponse {
    fn default() -> &'a MsgBeginRedelegateResponse {
        <MsgBeginRedelegateResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgBeginRedelegateResponse {
    pub fn new() -> MsgBeginRedelegateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "completion_time",
            |m: &MsgBeginRedelegateResponse| { &m.completion_time },
            |m: &mut MsgBeginRedelegateResponse| { &mut m.completion_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgBeginRedelegateResponse>(
            "MsgBeginRedelegateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgBeginRedelegateResponse {
    const NAME: &'static str = "MsgBeginRedelegateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.completion_time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.completion_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.completion_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgBeginRedelegateResponse {
        MsgBeginRedelegateResponse::new()
    }

    fn clear(&mut self) {
        self.completion_time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgBeginRedelegateResponse {
        static instance: MsgBeginRedelegateResponse = MsgBeginRedelegateResponse {
            completion_time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgBeginRedelegateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgBeginRedelegateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgBeginRedelegateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgBeginRedelegateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'cosmos/staking/v1beta1/staking_tx.proto\x12\x16cosmos.staking.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\
    \x1ecosmos/base/v1beta1/coin.proto\"\xe6\x01\n\x0bMsgDelegate\x12I\n\x11\
    delegator_address\x18\x01\x20\x01(\tR\x10delegatorAddressB\x1c\xf2\xde\
    \x1f\x18yaml:\"delegator_address\"\x12I\n\x11validator_address\x18\x02\
    \x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"validator_ad\
    dress\"\x127\n\x06amount\x18\x03\x20\x01(\x0b2\x19.cosmos.base.v1beta1.C\
    oinR\x06amountB\x04\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x15\
    \n\x13MsgDelegateResponse\"\xba\x02\n\x12MsgBeginRedelegate\x12E\n\x11de\
    legator_address\x18\x01\x20\x01(\tR\x10delegatorAddressB\x18\xf2\xde\x1f\
    \x14cosmos.AddressString\x12L\n\x15validator_src_address\x18\x02\x20\x01\
    (\tR\x13validatorSrcAddressB\x18\xf2\xde\x1f\x14cosmos.AddressString\x12\
    L\n\x15validator_dst_address\x18\x03\x20\x01(\tR\x13validatorDstAddressB\
    \x18\xf2\xde\x1f\x14cosmos.AddressString\x127\n\x06amount\x18\x04\x20\
    \x01(\x0b2\x19.cosmos.base.v1beta1.CoinR\x06amountB\x04\xc8\xde\x1f\0:\
    \x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"k\n\x1aMsgBeginRedelegateResponse\x12M\
    \n\x0fcompletion_time\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.Timestam\
    pR\x0ecompletionTimeB\x08\xc8\xde\x1f\0\x90\xdf\x1f\x012\xd1\x01\n\x03Ms\
    g\x12\\\n\x08Delegate\x12#.cosmos.staking.v1beta1.MsgDelegate\x1a+.cosmo\
    s.staking.v1beta1.MsgDelegateResponse\x12l\n\nRedelegate\x12*.cosmos.sta\
    king.v1beta1.MsgBeginRedelegate\x1a2.cosmos.staking.v1beta1.MsgBeginRede\
    legateResponseB.Z,github.com/cosmos/cosmos-sdk/x/staking/typesJ\xf8\r\n\
    \x06\x12\x04\0\00\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\0\x1f\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\x03\x01\
    \x12\x03\x04\0)\n\t\n\x02\x03\x02\x12\x03\x06\0(\n\x08\n\x01\x08\x12\x03\
    \x08\0C\n\t\n\x02\x08\x0b\x12\x03\x08\0C\n2\n\x02\x06\0\x12\x04\x0b\0\
    \x10\x01\x1a&\x20Msg\x20defines\x20the\x20staking\x20Msg\x20service.\n\n\
    \n\n\x03\x06\0\x01\x12\x03\x0b\x08\x0b\no\n\x04\x06\0\x02\0\x12\x03\x0e\
    \x02:\x1ab\x20Delegate\x20defines\x20a\x20method\x20for\x20performing\
    \x20a\x20delegation\x20of\x20coins\n\x20from\x20a\x20delegator\x20to\x20\
    a\x20validator.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0e\x06\x0e\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x03\x0e\x0f\x1a\n\x0c\n\x05\x06\0\x02\0\x03\
    \x12\x03\x0e%8\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x0f\x02J\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03\x0f\x06\x10\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03\x0f\x11#\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0f.H\nv\n\x02\x04\0\
    \x12\x04\x14\0\x1b\x01\x1aj\x20MsgDelegate\x20defines\x20a\x20SDK\x20mes\
    sage\x20for\x20performing\x20a\x20delegation\x20of\x20coins\n\x20from\
    \x20a\x20delegator\x20to\x20a\x20validator.\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x14\x08\x13\n\n\n\x03\x04\0\x07\x12\x03\x15\x02-\n\r\n\x06\x04\0\
    \x07\x8d\xf4\x03\x12\x03\x15\x02-\n\n\n\x03\x04\0\x07\x12\x03\x16\x02-\n\
    \r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\x16\x02-\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x18\x02g\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x18\x02\x16-\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x18\x1b,\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x18/0\n\x0c\n\x05\x04\
    \0\x02\0\x08\x12\x03\x181f\n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\
    \x03\x182e\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x19\x02g\n\r\n\x05\x04\0\
    \x02\x01\x04\x12\x04\x19\x02\x18g\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x19\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x19\x1b,\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x19/0\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\
    \x191f\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x192e\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03\x1a\x02P\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\
    \x1a\x02\x19g\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x1a\x02\x1a\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x1a\x1b!\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x1a/0\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x1a1O\n\x0f\n\x08\
    \x04\0\x02\x02\x08\xe9\xfb\x03\x12\x03\x1a2N\nH\n\x02\x04\x01\x12\x03\
    \x1e\0\x1e\x1a=\x20MsgDelegateResponse\x20defines\x20the\x20Msg/Delegate\
    \x20response\x20type.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1e\x08\x1b\n\xa1\
    \x01\n\x02\x04\x02\x12\x04\"\0+\x01\x1a\x94\x01\x20MsgBeginRedelegate\
    \x20defines\x20a\x20SDK\x20message\x20for\x20performing\x20a\x20redelega\
    tion\n\x20of\x20coins\x20from\x20a\x20delegator\x20and\x20source\x20vali\
    dator\x20to\x20a\x20destination\x20validator.\n\n\n\n\x03\x04\x02\x01\
    \x12\x03\"\x08\x1a\n\n\n\x03\x04\x02\x07\x12\x03$\x02-\n\r\n\x06\x04\x02\
    \x07\x8d\xf4\x03\x12\x03$\x02-\n\n\n\x03\x04\x02\x07\x12\x03%\x02-\n\r\n\
    \x06\x04\x02\x07\x81\xf4\x03\x12\x03%\x02-\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03'\x02e\n\r\n\x05\x04\x02\x02\0\x04\x12\x04'\x02%-\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03'\
    \x1b,\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03'34\n\x0c\n\x05\x04\x02\x02\0\
    \x08\x12\x03'5d\n\x0f\n\x08\x04\x02\x02\0\x08\xee\xfb\x03\x12\x03'6c\n\
    \x0b\n\x04\x04\x02\x02\x01\x12\x03(\x02e\n\r\n\x05\x04\x02\x02\x01\x04\
    \x12\x04(\x02'e\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03(\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03(\x1b0\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03(34\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\x03(5d\n\x0f\n\x08\x04\
    \x02\x02\x01\x08\xee\xfb\x03\x12\x03(6c\n\x0b\n\x04\x04\x02\x02\x02\x12\
    \x03)\x02e\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04)\x02(e\n\x0c\n\x05\x04\
    \x02\x02\x02\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\
    \x03)\x1b0\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03)34\n\x0c\n\x05\x04\
    \x02\x02\x02\x08\x12\x03)5d\n\x0f\n\x08\x04\x02\x02\x02\x08\xee\xfb\x03\
    \x12\x03)6c\n\x0b\n\x04\x04\x02\x02\x03\x12\x03*\x02T\n\r\n\x05\x04\x02\
    \x02\x03\x04\x12\x04*\x02)e\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03*\x02\
    \x1a\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03*\x1b!\n\x0c\n\x05\x04\x02\
    \x02\x03\x03\x12\x03*34\n\x0c\n\x05\x04\x02\x02\x03\x08\x12\x03*5S\n\x0f\
    \n\x08\x04\x02\x02\x03\x08\xe9\xfb\x03\x12\x03*6R\nW\n\x02\x04\x03\x12\
    \x04.\00\x01\x1aK\x20MsgBeginRedelegateResponse\x20defines\x20the\x20Msg\
    /BeginRedelegate\x20response\x20type.\n\n\n\n\x03\x04\x03\x01\x12\x03.\
    \x08\"\n\x0b\n\x04\x04\x03\x02\0\x12\x03/\x02k\n\r\n\x05\x04\x03\x02\0\
    \x04\x12\x04/\x02.$\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03/\x02\x1b\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03/\x1c+\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03/./\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x03/0j\n\x0f\n\x08\x04\x03\x02\
    \0\x08\xe9\xfb\x03\x12\x03/1M\n\x0f\n\x08\x04\x03\x02\0\x08\xf2\xfb\x03\
    \x12\x03/Oib\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(MsgDelegate::generated_message_descriptor_data());
            messages.push(MsgDelegateResponse::generated_message_descriptor_data());
            messages.push(MsgBeginRedelegate::generated_message_descriptor_data());
            messages.push(MsgBeginRedelegateResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
