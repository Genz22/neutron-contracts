syntax = "proto3";
package neutron.interchainadapter.interchainqueries;

import "tendermint/crypto/proof.proto";
import "tendermint/abci/abcitypes.proto";
import "google/protobuf/any.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/neutron-org/neutron/x/interchainqueries/types";


message MsgRegisterInterchainQuery {
  string query_data = 1;
  string query_type = 2;
  string zone_id = 3;
  string connection_id = 4;
  uint64 update_period = 5;
  string sender = 6;
}

message MsgRegisterInterchainQueryResponse { uint64 id = 1; }

message MsgSubmitQueryResult {
  uint64 query_id = 1;
  string sender = 2;
  string client_id = 3;
  QueryResult result = 4;
}

message QueryResult {
  repeated StorageValue kv_results = 1;
  repeated Block blocks = 2;
  uint64 height = 3;
  uint64 revision = 4;
}

message StorageValue {
  string storage_prefix = 1;
  bytes key = 2;
  bytes value = 3;

  tendermint.crypto.ProofOps Proof = 4;
}

message Block {
  // We need to know block X+1 to verify result of transaction for block X
  // since LastResultsHash is root hash of all results from the txs from the previous block
  google.protobuf.Any next_block_header = 1;

  // We need to know block X to verify inclusion of transaction for block X
  google.protobuf.Any header = 2;

  repeated TxValue txs = 3;
}

message TxValue {
  tendermint.abci.ResponseDeliverTx response = 1;
  tendermint.crypto.Proof delivery_proof = 2;
  tendermint.crypto.Proof inclusion_proof = 3;
  bytes data = 4;
}

message MsgSubmitQueryResultResponse {

}